name: E2E Tests

on:
  merge_group:
  workflow_dispatch:
    inputs:
      # used by regression_testing.yml and entry_workflow.yml
      dispatch:
        type: string
        description: "'regression' or the JSON of a PR's context"
        required: false

jobs:
  e2e-test:
    strategy:
      matrix:
        # Supported GitHub-hosted runners and hardware resources
        # see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        os: [ubuntu-22.04]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    env:
      IS_DISPATCH: ${{ github.event_name == 'workflow_dispatch' }}
      IS_REGRESSION: ${{ github.event.inputs.dispatch == 'regression' }}

    # When the permissions key is used, all unspecified permissions are set to no access, with the
    # exception of the metadata scope, which always gets read access.
    # See https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    permissions:
      statuses: write

    steps:
    - name: Get the git ref of Axon
      uses: actions/github-script@v6
      id: axon_git_ref
      with:
        script: |
          if (`${{ env.IS_DISPATCH }}` == 'true' && `${{ env.IS_REGRESSION }}` == 'false' && `${{ github.event.inputs.dispatch }}`) {
            const dispatch = JSON.parse(`${{ github.event.inputs.dispatch }}`);
            const prNum = dispatch.issue.number;
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: dispatch.repo.owner,
              repo: dispatch.repo.repo,
              pull_number: dispatch.issue.number,
            });
            return pullRequest.head.sha;
          }
          return `${{ github.sha }}`;
        result-encoding: string

    - name: Checkout Axon ${{ steps.axon_git_ref.outputs.result}}
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.axon_git_ref.outputs.result}}

    - name: Cache of Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ matrix.os }}-${{ runner.os }}-${{ runner.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - uses: actions/setup-node@v3
      with:
        node-version: "18"
    - name: Get yarn cache directory
      id: yarn-cache-dir
      run: echo "dir=$(yarn cache dir)" >> ${GITHUB_OUTPUT}
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - name: Node Cache
      uses: actions/cache@v3
      id: npm-and-yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: |
          ${{ steps.yarn-cache-dir.outputs.dir }}
          ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node_modules-

    - name: E2E Tests Linting in tests/e2e
      run: make e2e-test-lint
    - name: E2E Tests in tests/e2e
      run: make e2e-test-ci

    # The `statuses: write` permission is required in this step.
    - name: Update the commit Status
      if: always() && env.IS_DISPATCH == 'true' && env.IS_REGRESSION == 'false'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createCommitStatus({
            state: '${{ job.status }}',
            owner: context.repo.owner,
            repo: context.repo.repo,
            context: '${{ github.workflow }}',
            sha: '${{ steps.axon_git_ref.outputs.result}}',
            target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          })
